# $Id: egammaRecHitsToPixelMatchGsfElectrons.cfg,v 1.20 2008/03/03 17:09:02 uberthon Exp $
# make Gsf electrons from pixel seed tracks
#
# Created by Shahram Rahatlou from example by Ursula Berthon and Claude Charlot
#

process electrons = {
  include "Configuration/StandardSequences/data/FakeConditions.cff"

  ### keep the logging output to a nice level ###
#  include "FWCore/MessageLogger/data/MessageLogger.cfi"
  service = MessageLogger {
         untracked vstring debugModules = {   "pixelMatchGsfElectrons"   }
         untracked vstring categories    =    { "GsfElectronAlgo"}

         untracked vstring destinations =  {    "cout"  }
         untracked PSet cout   =  {
                 untracked string threshold = "DEBUG"
                 untracked PSet DEBUG ={untracked int32 limit = 0}
                 untracked PSet GsfElectronAlgo ={untracked int32 limit = 1000000000000}
         }
    }

  ## debugging services
  #service = EnableFloatingPointExceptions {}
  #service = Tracer {}

  source = PoolSource {
    untracked vstring fileNames =
#    {'file:/data/uberthon/electrons/38151E90-8997-DC11-8CFA-000423D95220.root'}
	{'rfio:/castor/cern.ch/cms/store/relval/2008/3/20/RelVal-RelValSingleElectronPt35-1205894772-HLT/0000/1221CE67-30F6-DC11-81BC-000423D9853C.root'}
#	{'rfio:/castor/cern.ch/cms/store/relval/2008/2/4/RelVal-SingleElectronPt35-1202115095-HLT/0000/AEB9CAE2-51D3-DC11-9D5C-001617C3B6E2.root'}
    untracked uint32 debugVerbosity = 1
    untracked bool   debugFlag     = true
  }
  untracked PSet maxEvents = {untracked int32 input = 10}

  # complete clustering sequence
  include "RecoEcal/EgammaClusterProducers/data/ecalClusteringSequence.cff"
  
  # sequence to make pixel-based Gsf electrons
  include "RecoEgamma/EgammaElectronProducers/data/pixelMatchGsfElectronSequence.cff"
  
  path p = { ecalClusteringSequence, pixelMatchGsfElectronSequence }

# keep only what is produced in this process
# should avoid problmes that may arise when copyingincompatible data from input file
  module out = PoolOutputModule {
    untracked string fileName = "mytest.root"
    untracked vstring outputCommands = {
       "drop *",
       "keep SiPixel*_*_*_*",
       "keep SiStrip*_*_*_*",
	    "keep HBHER*_*_*_*",
       "keep *_*_*_electrons"
    }
  }
  service = Timing { }
  endpath outpath = { out }
}
